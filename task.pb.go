// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

package notifierhub

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TorrentTask struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Size                 int64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Rest                 string   `protobuf:"bytes,5,opt,name=rest,proto3" json:"rest,omitempty"`
	Hash                 string   `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	StartTS              int64    `protobuf:"varint,7,opt,name=startTS,proto3" json:"startTS,omitempty"`
	FinishTS             int64    `protobuf:"varint,8,opt,name=finishTS,proto3" json:"finishTS,omitempty"`
	Aria2TS              int64    `protobuf:"varint,9,opt,name=aria2TS,proto3" json:"aria2TS,omitempty"`
	ErrorCounter         uint32   `protobuf:"varint,10,opt,name=errorCounter,proto3" json:"errorCounter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TorrentTask) Reset()         { *m = TorrentTask{} }
func (m *TorrentTask) String() string { return proto.CompactTextString(m) }
func (*TorrentTask) ProtoMessage()    {}
func (*TorrentTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{0}
}

func (m *TorrentTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TorrentTask.Unmarshal(m, b)
}
func (m *TorrentTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TorrentTask.Marshal(b, m, deterministic)
}
func (m *TorrentTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TorrentTask.Merge(m, src)
}
func (m *TorrentTask) XXX_Size() int {
	return xxx_messageInfo_TorrentTask.Size(m)
}
func (m *TorrentTask) XXX_DiscardUnknown() {
	xxx_messageInfo_TorrentTask.DiscardUnknown(m)
}

var xxx_messageInfo_TorrentTask proto.InternalMessageInfo

func (m *TorrentTask) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *TorrentTask) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TorrentTask) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *TorrentTask) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TorrentTask) GetRest() string {
	if m != nil {
		return m.Rest
	}
	return ""
}

func (m *TorrentTask) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TorrentTask) GetStartTS() int64 {
	if m != nil {
		return m.StartTS
	}
	return 0
}

func (m *TorrentTask) GetFinishTS() int64 {
	if m != nil {
		return m.FinishTS
	}
	return 0
}

func (m *TorrentTask) GetAria2TS() int64 {
	if m != nil {
		return m.Aria2TS
	}
	return 0
}

func (m *TorrentTask) GetErrorCounter() uint32 {
	if m != nil {
		return m.ErrorCounter
	}
	return 0
}

func init() {
	proto.RegisterType((*TorrentTask)(nil), "notifierhub.TorrentTask")
}

func init() { proto.RegisterFile("task.proto", fileDescriptor_ce5d8dd45b4a91ff) }

var fileDescriptor_ce5d8dd45b4a91ff = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd0, 0xc1, 0x4e, 0xc4, 0x20,
	0x10, 0x80, 0xe1, 0xe0, 0xae, 0xbb, 0xdb, 0xa9, 0x5e, 0x38, 0x4d, 0x3c, 0x35, 0x3d, 0xf5, 0xe4,
	0x41, 0x1f, 0xc1, 0x37, 0x68, 0x79, 0x01, 0x1a, 0x69, 0x20, 0x4d, 0xa0, 0x19, 0x86, 0x83, 0xbe,
	0xb9, 0x37, 0x33, 0xa0, 0x26, 0xde, 0xfe, 0xf9, 0x60, 0x38, 0x00, 0xc0, 0x36, 0xef, 0xcf, 0x07,
	0x25, 0x4e, 0xba, 0x8f, 0x89, 0xc3, 0x16, 0x1c, 0xf9, 0xb2, 0x8e, 0x5f, 0x0a, 0x7a, 0x93, 0x88,
	0x5c, 0x64, 0x63, 0xf3, 0xae, 0x35, 0x9c, 0x4b, 0x09, 0xef, 0xa8, 0x06, 0x35, 0x75, 0x73, 0x6d,
	0xb1, 0xc3, 0xb2, 0xc7, 0xbb, 0x66, 0xd2, 0x62, 0x39, 0x7c, 0x3a, 0x3c, 0x0d, 0x6a, 0x3a, 0xcd,
	0xb5, 0xc5, 0xf8, 0xe3, 0x70, 0x78, 0x6e, 0xf7, 0xa4, 0xc5, 0xc8, 0x65, 0xc6, 0xfb, 0x66, 0xd2,
	0x62, 0xde, 0x66, 0x8f, 0x97, 0x66, 0xd2, 0x1a, 0xe1, 0x9a, 0xd9, 0x12, 0x9b, 0x05, 0xaf, 0xf5,
	0xc9, 0xdf, 0x51, 0x3f, 0xc1, 0x6d, 0x0b, 0x31, 0x64, 0x6f, 0x16, 0xbc, 0xd5, 0xa3, 0xbf, 0x59,
	0xb6, 0x2c, 0x05, 0xfb, 0x62, 0x16, 0xec, 0xda, 0xd6, 0xcf, 0xa8, 0x47, 0x78, 0x70, 0x44, 0x89,
	0xde, 0x52, 0x89, 0xec, 0x08, 0x61, 0x50, 0xd3, 0xe3, 0xfc, 0xcf, 0xd6, 0x4b, 0xfd, 0x8f, 0xd7,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0xd3, 0x56, 0xe7, 0x1d, 0x01, 0x00, 0x00,
}
